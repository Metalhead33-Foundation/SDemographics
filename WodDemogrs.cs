// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Serialization;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
namespace WoDDemographics
{
	[XmlRoot(ElementName="DemographicData")]
    public class Welcome
    {
        [XmlIgnore]
        [JsonIgnore]
        public static Welcome WorkingEntry { get; set; }
        public Welcome() {
            WorkingEntry = this;
        }

        //[XmlElement(ElementName="Countries")]
        [JsonProperty("countries")]
        public List<Country> Countries { get; set; }

        //[XmlElement(ElementName="Regions")]
        [JsonProperty("regions")]
        public List<Region> Regions { get; set; }

        //[XmlElement(ElementName="Areas")]
        [JsonProperty("areas")]
        public List<Area> Areas { get; set; }

        //[XmlElement(ElementName="Races")]
        [JsonProperty("races")]
        public List<Race> Races { get; set; }

        //[XmlElement(ElementName="Religions")]
        [JsonProperty("religions")]
        public List<Religion> Religions { get; set; }

        //[XmlElement(ElementName="AgeGroups")]
        [JsonProperty("agegroups")]
        public List<Agegroup> Agegroups { get; set; }

        //[XmlElement(ElementName="Occupations")]
        [JsonProperty("occupations")]
        public List<Occupation> Occupations { get; set; }

        //[XmlElement(ElementName="Pops")]
        [JsonProperty("pops")]
        public List<Pop> Pops { get; set; }
    }

	[XmlRoot(ElementName="AgeGroup")]
    public class Agegroup
    {
		[XmlAttribute(AttributeName="id")]
        [JsonProperty("agegrpID")]
        public long AgegrpId { get; set; }

		[XmlAttribute(AttributeName="name")]
        [JsonProperty("agegrpName")]
        public string AgegrpName { get; set; }
    }
	[XmlRoot(ElementName="AgeGroups")]
    public class AgeGroups
    {
        [XmlElement(ElementName="AgeGroup")]
        [JsonProperty("agegroups")]
        public List<Agegroup> agegrp { get; set; }
    }

	[XmlRoot(ElementName="Area")]
    public class Area
    {
		[XmlAttribute(AttributeName="id")]
        [JsonProperty("areaID")]
        public long AreaId { get; set; }

		[XmlAttribute(AttributeName="name")]
        [JsonProperty("areaName")]
        public string AreaName { get; set; }

		[XmlAttribute(AttributeName="isRural")]
        [JsonProperty("rural")]
        public bool Rural { get; set; }

        [XmlIgnore]
        [JsonIgnore]
        public Region Region { get; set; }

		[XmlAttribute(AttributeName="regionId")]
        [JsonProperty("regionID")]
        public long RegionId { 
            get { return this.Region != null ? this.Region.RegionId : 0; }
            set {
                this.Region = Welcome.WorkingEntry.Regions.Find(x => x.RegionId == value);
            }
        }
    }
	[XmlRoot(ElementName="Areas")]
    public class Areas
    {
        [XmlElement(ElementName="Area")]
        [JsonProperty("areas")]
        public List<Area> areaz { get; set; }
    }

	[XmlRoot(ElementName="Country")]
    public class Country
    {
		[XmlAttribute(AttributeName="id")]
        [JsonProperty("countryID")]
        public long CountryId { get; set; }

		[XmlAttribute(AttributeName="name")]
        [JsonProperty("countryName")]
        public string CountryName { get; set; }
    }
	[XmlRoot(ElementName="Countries")]
    public class Countries
    {
        [XmlElement(ElementName="Country")]
        [JsonProperty("countries")]
        public List<Country> countriez { get; set; }
    }

	[XmlRoot(ElementName="Occupation")]
    public class Occupation
    {
		[XmlAttribute(AttributeName="id")]
        [JsonProperty("occupationID")]
        public long OccupationId { get; set; }

		[XmlAttribute(AttributeName="name")]
        [JsonProperty("occupationName")]
        public string OccupationName { get; set; }
    }
	[XmlRoot(ElementName="Occupations")]
    public class Occupations
    {
        [XmlElement(ElementName="Occupation")]
        [JsonProperty("occupations")]
        public List<Occupation> occupationz { get; set; }
    }

	[XmlRoot(ElementName="Pop")]
    public class Pop
    {
		[XmlAttribute(AttributeName="id")]
        [JsonProperty("popId")]
        public long PopId { get; set; }

		[XmlAttribute(AttributeName="quantity")]
        [JsonProperty("quantity")]
        public long Quantity { get; set; }

        [XmlIgnore]
        [JsonIgnore]
        public Area Area { get; set; }

		[XmlAttribute(AttributeName="areaId")]
        [JsonProperty("areaID")]
        public long AreaId { 
            get { return this.Area != null ? this.Area.AreaId : 0; }
            set {
                this.Area = Welcome.WorkingEntry.Areas.Find(x => x.AreaId == value);
            }
        }

        [XmlIgnore]
        [JsonIgnore]
        public Race Race { get; set; }

		[XmlAttribute(AttributeName="raceId")]
        [JsonProperty("raceId")]
        public long RaceId { 
            get { return this.Race != null ? this.Race.RaceId : 0; }
            set {
                this.Race = Welcome.WorkingEntry.Races.Find(x => x.RaceId == value);
            }
        }

        [XmlIgnore]
        [JsonIgnore]
        public Religion Religion { get; set; }

		[XmlAttribute(AttributeName="religionId")]
        [JsonProperty("religionID")]
        public long ReligionId { 
            get { return this.Religion != null ? this.Religion.ReligionId : 0; }
            set {
                this.Religion = Welcome.WorkingEntry.Religions.Find(x => x.ReligionId == value);
            }
        }

        [XmlIgnore]
        [JsonIgnore]
        public Occupation Occupation { get; set; }

		[XmlAttribute(AttributeName="occupationId")]
        [JsonProperty("occupationID")]
        public long OccupationId { 
            get { return this.Occupation != null ? this.Occupation.OccupationId : 0; }
            set {
                this.Occupation = Welcome.WorkingEntry.Occupations.Find(x => x.OccupationId == value);
            }
        }

        [XmlIgnore]
        [JsonIgnore]
        public Agegroup Agegroup { get; set; }

		[XmlAttribute(AttributeName="agegroupId")]
        [JsonProperty("agegroupID")]
        public long AgegroupId { 
            get { return this.Agegroup != null ? this.Agegroup.AgegrpId : 0; }
            set {
                this.Agegroup = Welcome.WorkingEntry.Agegroups.Find(x => x.AgegrpId == value);
            }
        }

		[XmlAttribute(AttributeName="female")]
        [JsonProperty("female")]
        public bool Female { get; set; }
    }
	[XmlRoot(ElementName="Pops")]
    public class Pops
    {
        [XmlElement(ElementName="Pop")]
        [JsonProperty("pops")]
        public List<Pop> popz { get; set; }
    }

	[XmlRoot(ElementName="Race")]
    public class Race
    {
		[XmlAttribute(AttributeName="id")]
        [JsonProperty("raceID")]
        public long RaceId { get; set; }

		[XmlAttribute(AttributeName="name")]
        [JsonProperty("raceName")]
        public string RaceName { get; set; }

		[XmlAttribute(AttributeName="nameHun")]
        [JsonProperty("raceName_hun", NullValueHandling = NullValueHandling.Ignore)]
        public string? RaceNameHun { get; set; }
    }
	[XmlRoot(ElementName="Races")]
    public class Races
    {
        [XmlElement(ElementName="Race")]
        [JsonProperty("races")]
        public List<Race> racez { get; set; }
    }

	[XmlRoot(ElementName="Region")]
    public class Region
    {
		[XmlAttribute(AttributeName="id")]
        [JsonProperty("regionID")]
        public long RegionId { get; set; }

		[XmlAttribute(AttributeName="name")]
        [JsonProperty("regionName")]
        public string RegionName { get; set; }

        [XmlIgnore]
        [JsonIgnore]
        public Country Country { get; set; }

		[XmlAttribute(AttributeName="countryId")]
        [JsonProperty("countryID")]
        public long CountryId { 
            get { return this.Country != null ? this.Country.CountryId : 0; }
            set {
                this.Country  = Welcome.WorkingEntry.Countries.Find(x => x.CountryId == value);
            }
        }
    }
	[XmlRoot(ElementName="Regions")]
    public class Regions
    {
        [XmlElement(ElementName="Region")]
        [JsonProperty("regions")]
        public List<Region> regionz { get; set; }
    }

	[XmlRoot(ElementName="Religion")]
    public class Religion
    {
		[XmlAttribute(AttributeName="id")]
        [JsonProperty("religionID")]
        public long ReligionId { get; set; }

		[XmlAttribute(AttributeName="name")]
        [JsonProperty("religionName")]
        public string ReligionName { get; set; }
    }
	[XmlRoot(ElementName="Religions")]
    public class Religions
    {
        [XmlElement(ElementName="Religion")]
        [JsonProperty("religions")]
        public List<Religion> religionz { get; set; }
    }

    public class WodDemogr {
        public static Welcome QueryFromJson(string folder) {
        Welcome toReturn = new Welcome();
        Welcome.WorkingEntry = toReturn;
            // Basic shit
        Religions religions = JsonConvert.DeserializeObject<Religions>(File.ReadAllText(Path.Combine(folder,"religions.json")));
        toReturn.Religions = religions.religionz;
        Races races = JsonConvert.DeserializeObject<Races>(File.ReadAllText(Path.Combine(folder,"races.json")));
        toReturn.Races = races.racez;
        Occupations occupations = JsonConvert.DeserializeObject<Occupations>(File.ReadAllText(Path.Combine(folder,"occupations.json")));
        toReturn.Occupations = occupations.occupationz;
        AgeGroups agegroups = JsonConvert.DeserializeObject<AgeGroups>(File.ReadAllText(Path.Combine(folder,"agegroups.json")));
        toReturn.Agegroups = agegroups.agegrp;
        // Countries
        Countries countries = JsonConvert.DeserializeObject<Countries>(File.ReadAllText(Path.Combine(folder,"countries.json")));
        toReturn.Countries = countries.countriez;
        // Regions
        Regions regions = JsonConvert.DeserializeObject<Regions>(File.ReadAllText(Path.Combine(folder,"regions.json")));
        toReturn.Regions = regions.regionz;
        // Areas
        Areas areas = JsonConvert.DeserializeObject<Areas>(File.ReadAllText(Path.Combine(folder,"areas.json")));
        toReturn.Areas = areas.areaz;
        // Pops
        Pops pops = JsonConvert.DeserializeObject<Pops>(File.ReadAllText(Path.Combine(folder,"pops.json")));
        toReturn.Pops = pops.popz;
        return toReturn;
        }
        public static void saveSeparate(Welcome unified, string folder, Newtonsoft.Json.Formatting formatting = Newtonsoft.Json.Formatting.None) {
            using(StreamWriter writer = new StreamWriter(Path.Combine(folder,"religions.json"))) {
                writer.WriteLine(JsonConvert.SerializeObject(new Religions {
                    religionz = unified.Religions
                },formatting));
            }
            using(StreamWriter writer = new StreamWriter(Path.Combine(folder,"races.json"))) {
                writer.WriteLine(JsonConvert.SerializeObject(new Races {
                    racez = unified.Races
                },formatting));
            }
            using(StreamWriter writer = new StreamWriter(Path.Combine(folder,"occupations.json"))) {
                writer.WriteLine(JsonConvert.SerializeObject(new Occupations {
                    occupationz = unified.Occupations
                },formatting));
            }
            using(StreamWriter writer = new StreamWriter(Path.Combine(folder,"agegroups.json"))) {
                writer.WriteLine(JsonConvert.SerializeObject(new AgeGroups {
                    agegrp = unified.Agegroups
                },formatting));
            }
            using(StreamWriter writer = new StreamWriter(Path.Combine(folder,"countries.json"))) {
                writer.WriteLine(JsonConvert.SerializeObject(new Countries {
                    countriez = unified.Countries
                },formatting));
            }
            using(StreamWriter writer = new StreamWriter(Path.Combine(folder,"regions.json"))) {
                writer.WriteLine(JsonConvert.SerializeObject(new Regions {
                    regionz = unified.Regions
                },formatting));
            }
            using(StreamWriter writer = new StreamWriter(Path.Combine(folder,"areas.json"))) {
                writer.WriteLine(JsonConvert.SerializeObject(new Areas {
                    areaz = unified.Areas
                },formatting));
            }
            using(StreamWriter writer = new StreamWriter(Path.Combine(folder,"pops.json"))) {
                writer.WriteLine(JsonConvert.SerializeObject(new Pops {
                    popz = unified.Pops
                },formatting));
            }
        }
    }
}
